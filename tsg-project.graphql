schema {
  query: Root
  mutation: Mutations
}

type About implements TSSearchable {
  clients: AboutClients
  social: AboutSocial
  about: AboutAbout
  team: AboutTeam
  press: AboutPress
  title: String!
  photostrip: [AboutPhotostrip]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type AboutAbout {
  heading: String
  content: JSON
  contentHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
}

input AboutAboutInput {
  heading: String
  content: JSON
}

type AboutClients {
  heading: String
  logos: [AboutClientsLogos]
}

input AboutClientsInput {
  heading: String
  logos: [AboutClientsLogosInput]
}

type AboutClientsLogos {
  name: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  url: String
}

input AboutClientsLogosInput {
  name: String
  image: TSRelationshipInput
  url: String
}

type AboutPaginatedList {
  items: [About]
  total: Int
}

type AboutPhotostrip {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input AboutPhotostripInput {
  image: TSRelationshipInput
}

type AboutPress {
  heading: String
  items: [AboutPressItems]
}

input AboutPressInput {
  heading: String
  items: [AboutPressItemsInput]
}

type AboutPressItems {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  source: String
  title: String
  url: String
}

input AboutPressItemsInput {
  image: TSRelationshipInput
  source: String
  title: String
  url: String
}

type AboutSocial {
  title: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  description: String
}

input AboutSocialInput {
  title: String
  image: TSRelationshipInput
  description: String
}

type AboutTeam {
  heading: String
  members: [AboutTeamMembers]
}

input AboutTeamInput {
  heading: String
  members: [AboutTeamMembersInput]
}

type AboutTeamMembers {
  about: JSON
  aboutHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  name: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input AboutTeamMembersInput {
  about: JSON
  name: String
  image: TSRelationshipInput
}

type Asset implements TSSearchable {
  sourceUrl: String
  path: String!
  filename: String!
  description: String
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  uploadStatus: String
  mimeType: String
  title: String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String @deprecated(reason: "Use path instead")
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AssetReferencePaginatedList
  filmsSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmsPaginatedList
  homepageSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): HomepagePaginatedList
  footerSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FooterPaginatedList
  socialSettingsSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): SocialSettingsPaginatedList
  stillCategorySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StillCategoryPaginatedList
  stillSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StillPaginatedList
  locationSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): LocationPaginatedList
  aboutSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AboutPaginatedList
  filmSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmPaginatedList
  blogSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): BlogPaginatedList
  storySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StoryPaginatedList
  destinationsSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): DestinationsPaginatedList
  filmCategorySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmCategoryPaginatedList
  categorySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CategoryPaginatedList
  continentSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): ContinentPaginatedList
}

"""Returns a Asset list in natural order."""
type AssetPaginatedList {
  items: [Asset]
  total: Int
}

union AssetReference = Films | Homepage | Footer | SocialSettings | StillCategory | Still | Location | About | Film | Blog | Story | Destinations | FilmCategory | Category | Continent

type AssetReferencePaginatedList {
  items: [AssetReference]
  total: Int
}

"""Asset search results"""
type AssetSearchResults {
  results: [TSSearchable]
  total: Int
}

type BaseAsset implements TSSearchable {
  title: String
  description: String
  filename: String!
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type Blog implements TSSearchable {
  title: String!
  social: BlogSocial
  categories(locale: String, enableLocaleFallback: Boolean = true): [Category]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type BlogPaginatedList {
  items: [Blog]
  total: Int
}

type BlogSocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input BlogSocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

type Category implements TSSearchable {
  title: String!
  social: CategorySocial
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CategoryReferencePaginatedList
  navigationSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): NavigationPaginatedList
  blogSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): BlogPaginatedList
  storySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StoryPaginatedList
}

"""Returns a Category list in natural order."""
type CategoryPaginatedList {
  items: [Category]
  total: Int
}

union CategoryReference = Navigation | Blog | Story

type CategoryReferencePaginatedList {
  items: [CategoryReference]
  total: Int
}

"""Category search results"""
type CategorySearchResults {
  results: [TSSearchable]
  total: Int
}

type CategorySocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input CategorySocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

"""Describes a structural update to an array of data."""
input ContentStructureInput {
  """A deep path to the array being updated (e.g. a.b[1].c)."""
  path: String!

  """
  An array where the indices represent the to index, and the values represent
  the from index.For example to transform ["a","b","c","d"] into ["c","a"], this
  value would be [2,0].
  """
  structure: [Int]
}

type Continent implements TSSearchable {
  name: String!
  social: ContinentSocial
  locations(locale: String, enableLocaleFallback: Boolean = true): [Location]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): ContinentReferencePaginatedList
  navigationSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): NavigationPaginatedList
}

"""Returns a Continent list in natural order."""
type ContinentPaginatedList {
  items: [Continent]
  total: Int
}

union ContinentReference = Navigation

type ContinentReferencePaginatedList {
  items: [ContinentReference]
  total: Int
}

"""Continent search results"""
type ContinentSearchResults {
  results: [TSSearchable]
  total: Int
}

type ContinentSocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input ContinentSocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

"""create Asset input"""
input CreateAssetInput {
  sourceUrl: String
  path: String!
  filename: String!
  description: String
  caption: JSON
  uploadStatus: String
  mimeType: String
  title: String
  credit: JSON
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
  clientMutationId: String
}

type CreateAssetResult {
  clientMutationId: String
  result: Asset
}

"""create Category input"""
input CreateCategoryInput {
  title: String!
  social: CategorySocialInput
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateCategoryResult {
  clientMutationId: String
  result: Category
}

"""create Continent input"""
input CreateContinentInput {
  name: String!
  social: ContinentSocialInput
  locations: [TSRelationshipInput]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateContinentResult {
  clientMutationId: String
  result: Continent
}

"""create FilmCategory input"""
input CreateFilmCategoryInput {
  title: String!
  social: FilmCategorySocialInput
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateFilmCategoryResult {
  clientMutationId: String
  result: FilmCategory
}

"""create Film input"""
input CreateFilmInput {
  image: TSRelationshipInput!
  filmCategory: TSRelationshipInput
  title: String!
  youTubeUrl: String!
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateFilmResult {
  clientMutationId: String
  result: Film
}

"""create Location input"""
input CreateLocationInput {
  title: String!
  image: TSRelationshipInput
  social: LocationSocialInput
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateLocationResult {
  clientMutationId: String
  result: Location
}

"""create StillCategory input"""
input CreateStillCategoryInput {
  title: String!
  social: StillCategorySocialInput
  stills: [StillCategoryStillsInput]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateStillCategoryResult {
  clientMutationId: String
  result: StillCategory
}

"""create Story input"""
input CreateStoryInput {
  """The initial <ins></ins>, omit the <script></script>"""
  bookingContent: String
  social: StorySocialInput
  blockCanvas: JSON

  """The numeric sequence within data-widget-id"""
  rewardStyleId: String
  location: [TSRelationshipInput]
  title: String!
  tout: StoryToutInput!
  category: [TSRelationshipInput]
  relatedStories: [TSRelationshipInput]

  """blog URL title"""
  slug: String
  content: JSON!
  shopStyleHtml: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateStoryResult {
  clientMutationId: String
  result: Story
}

"""create TsStaticSite input"""
input CreateTsStaticSiteInput {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type CreateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

enum DefaultWorkflow {
  disabled
  enabled
}

"""delete Asset input"""
input DeleteAssetInput {
  _id: ID!
  clientMutationId: String
}

type DeleteAssetResult {
  clientMutationId: String
  result: Boolean
}

"""delete Category input"""
input DeleteCategoryInput {
  _id: ID!
  clientMutationId: String
}

type DeleteCategoryResult {
  clientMutationId: String
  result: Boolean
}

"""delete Continent input"""
input DeleteContinentInput {
  _id: ID!
  clientMutationId: String
}

type DeleteContinentResult {
  clientMutationId: String
  result: Boolean
}

"""delete FilmCategory input"""
input DeleteFilmCategoryInput {
  _id: ID!
  clientMutationId: String
}

type DeleteFilmCategoryResult {
  clientMutationId: String
  result: Boolean
}

"""delete Film input"""
input DeleteFilmInput {
  _id: ID!
  clientMutationId: String
}

type DeleteFilmResult {
  clientMutationId: String
  result: Boolean
}

"""delete Location input"""
input DeleteLocationInput {
  _id: ID!
  clientMutationId: String
}

type DeleteLocationResult {
  clientMutationId: String
  result: Boolean
}

"""delete StillCategory input"""
input DeleteStillCategoryInput {
  _id: ID!
  clientMutationId: String
}

type DeleteStillCategoryResult {
  clientMutationId: String
  result: Boolean
}

"""delete Story input"""
input DeleteStoryInput {
  _id: ID!
  clientMutationId: String
}

type DeleteStoryResult {
  clientMutationId: String
  result: Boolean
}

"""delete TsStaticSite input"""
input DeleteTsStaticSiteInput {
  _id: ID!
  clientMutationId: String
}

type DeleteTsStaticSiteResult {
  clientMutationId: String
  result: Boolean
}

type Destinations implements TSSearchable {
  locations(locale: String, enableLocaleFallback: Boolean = true): [Location]
  title: String!
  featuredLocations(locale: String, enableLocaleFallback: Boolean = true): [Location]
  social: DestinationsSocial
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type DestinationsPaginatedList {
  items: [Destinations]
  total: Int
}

type DestinationsSocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input DestinationsSocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

"""duplicate Asset input"""
input DuplicateAssetInput {
  _id: ID
  sourceUrl: String
  path: String
  filename: String
  description: String
  caption: JSON
  uploadStatus: String
  mimeType: String
  title: String
  credit: JSON
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
  clientMutationId: String
}

type DuplicateAssetResult {
  clientMutationId: String
  result: Asset
}

"""duplicate Category input"""
input DuplicateCategoryInput {
  _id: ID
  title: String
  social: CategorySocialInput
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateCategoryResult {
  clientMutationId: String
  result: Category
}

"""duplicate Continent input"""
input DuplicateContinentInput {
  _id: ID
  name: String
  social: ContinentSocialInput
  locations: [TSRelationshipInput]
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateContinentResult {
  clientMutationId: String
  result: Continent
}

"""duplicate FilmCategory input"""
input DuplicateFilmCategoryInput {
  _id: ID
  title: String
  social: FilmCategorySocialInput
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateFilmCategoryResult {
  clientMutationId: String
  result: FilmCategory
}

"""duplicate Film input"""
input DuplicateFilmInput {
  _id: ID
  image: TSRelationshipInput
  filmCategory: TSRelationshipInput
  title: String
  youTubeUrl: String
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateFilmResult {
  clientMutationId: String
  result: Film
}

"""duplicate Location input"""
input DuplicateLocationInput {
  _id: ID
  title: String
  image: TSRelationshipInput
  social: LocationSocialInput
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateLocationResult {
  clientMutationId: String
  result: Location
}

"""duplicate StillCategory input"""
input DuplicateStillCategoryInput {
  _id: ID
  title: String
  social: StillCategorySocialInput
  stills: [StillCategoryStillsInput]
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateStillCategoryResult {
  clientMutationId: String
  result: StillCategory
}

"""duplicate Story input"""
input DuplicateStoryInput {
  _id: ID

  """The initial <ins></ins>, omit the <script></script>"""
  bookingContent: String
  social: StorySocialInput
  blockCanvas: JSON

  """The numeric sequence within data-widget-id"""
  rewardStyleId: String
  location: [TSRelationshipInput]
  title: String
  tout: StoryToutInput
  category: [TSRelationshipInput]
  relatedStories: [TSRelationshipInput]

  """blog URL title"""
  slug: String
  content: JSON
  shopStyleHtml: String
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateStoryResult {
  clientMutationId: String
  result: Story
}

"""duplicate TsStaticSite input"""
input DuplicateTsStaticSiteInput {
  _id: ID
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type DuplicateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

type Film implements TSSearchable {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  filmCategory(locale: String, enableLocaleFallback: Boolean = true): FilmCategory
  title: String!
  youTubeUrl: String!
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmReferencePaginatedList
  filmsSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmsPaginatedList
}

type FilmCategory implements TSSearchable {
  title: String!
  social: FilmCategorySocial
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmCategoryReferencePaginatedList
  filmsSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmsPaginatedList
  navigationSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): NavigationPaginatedList
  filmSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FilmPaginatedList
}

"""Returns a FilmCategory list in natural order."""
type FilmCategoryPaginatedList {
  items: [FilmCategory]
  total: Int
}

union FilmCategoryReference = Films | Navigation | Film

type FilmCategoryReferencePaginatedList {
  items: [FilmCategoryReference]
  total: Int
}

"""FilmCategory search results"""
type FilmCategorySearchResults {
  results: [TSSearchable]
  total: Int
}

type FilmCategorySocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input FilmCategorySocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

"""Returns a Film list in natural order."""
type FilmPaginatedList {
  items: [Film]
  total: Int
}

union FilmReference = Films

type FilmReferencePaginatedList {
  items: [FilmReference]
  total: Int
}

type Films implements TSSearchable {
  title: String!
  featuredFilms(locale: String, enableLocaleFallback: Boolean = true): [Film]
  social: FilmsSocial
  filmCategories(locale: String, enableLocaleFallback: Boolean = true): [FilmCategory]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

"""Film search results"""
type FilmSearchResults {
  results: [TSSearchable]
  total: Int
}

type FilmsPaginatedList {
  items: [Films]
  total: Int
}

type FilmsSocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input FilmsSocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

type Footer implements TSSearchable {
  visuals: [FooterVisuals]
  contacts: [FooterContacts]
  formEndpoint: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type FooterContacts {
  email: String
  label: String
}

input FooterContactsInput {
  email: String
  label: String
}

type FooterPaginatedList {
  items: [Footer]
  total: Int
}

type FooterVisuals {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  label: String
  type: String
  url: String
}

input FooterVisualsInput {
  image: TSRelationshipInput
  label: String
  type: String
  url: String
}

type Homepage implements TSSearchable {
  recentEntries(locale: String, enableLocaleFallback: Boolean = true): [Story]
  slider: HomepageSlider
  social: HomepageSocial
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type HomepagePaginatedList {
  items: [Homepage]
  total: Int
}

type HomepageSlider {
  slides: [HomepageSliderSlides]
  interval: Int
}

input HomepageSliderInput {
  slides: [HomepageSliderSlidesInput]
  interval: Int
}

type HomepageSliderSlides {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  caption: HomepageSliderSlidesCaption
}

type HomepageSliderSlidesCaption {
  url: String
  text: String
}

input HomepageSliderSlidesCaptionInput {
  url: String
  text: String
}

input HomepageSliderSlidesInput {
  image: TSRelationshipInput
  caption: HomepageSliderSlidesCaptionInput
}

type HomepageSocial {
  title: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  description: String
}

input HomepageSocialInput {
  title: String
  image: TSRelationshipInput
  description: String
}

type HttpHeader {
  key: String
  value: String
}

input HttpHeaderInput {
  key: String
  value: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Location implements TSSearchable {
  title: String!
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  social: LocationSocial
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): LocationReferencePaginatedList
  navigationSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): NavigationPaginatedList
  storySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StoryPaginatedList
  destinationsSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): DestinationsPaginatedList
  continentSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): ContinentPaginatedList
}

"""Returns a Location list in natural order."""
type LocationPaginatedList {
  items: [Location]
  total: Int
}

union LocationReference = Navigation | Story | Destinations | Continent

type LocationReferencePaginatedList {
  items: [LocationReference]
  total: Int
}

"""Location search results"""
type LocationSearchResults {
  results: [TSSearchable]
  total: Int
}

type LocationSocial {
  title: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  description: String
}

input LocationSocialInput {
  title: String
  image: TSRelationshipInput
  description: String
}

type Mutations {
  """Create Project"""
  tsCreateProject(name: String!, type: String, defaultTimezone: String!): TSProjectListItem

  """Imports a project from a specified URI."""
  tsImportProject(uri: String!, name: String, origin: String): String

  """Get a URI to upload a project for import."""
  tsUploadProject(name: String, type: String, origin: String): UploadProjectResult

  """Create a Lock"""
  tsCreateLock(shapeId: ID, id: ID): TSLock

  """Extend a lock Project"""
  tsExtendLock(shapeId: ID, id: ID): TSLock

  """Remove a Lock"""
  tsRemoveLock(shapeId: ID, id: ID): Boolean

  """Remove a Lock"""
  tsBreakLock(shapeId: ID, id: ID): Boolean

  """Create an API Key"""
  tsCreateApiKey(name: String, role: String): TSApiKey

  """Delete an API Key"""
  tsDeleteApiKey(id: ID): Boolean

  """Create role"""
  tsCreateRole(input: TSRoleInput!): TSRole

  """Update role"""
  tsUpdateRole(input: TSRoleInput!): TSRole

  """Delete role"""
  tsDeleteRole(name: String!): Boolean

  """Update webhooks"""
  tsUpdateWebhooks(input: TSWebhooksInput!): TSWebhooks

  """Update Default Locale for Project"""
  tsUpdateDefaultLocale(defaultLocale: String!, version: Int!): JSONObject

  """Add Locale to Project"""
  tsAddLocale(locale: String!, version: Int!): JSONObject

  """Remove Locale from Project"""
  tsRemoveLocale(locale: String!, version: Int!): JSONObject

  """Update the current project schema"""
  tsUpdateSchema(input: TSUpdateSchemaInput!): JSONObject

  """Create or update a service in the current project schema"""
  tsSaveService(input: TSUpdateSchemaServiceInput!): JSONObject

  """Remove a service from the current project schema"""
  tsRemoveService(serviceId: String!): JSONObject

  """Create Workflow"""
  tsAddWorkflow(input: TSSaveWorkflowInput!): TSSaveWorkflowResponse

  """Update Workflow"""
  tsUpdateWorkflow(input: TSUpdateWorkflowInput!): TSSaveWorkflowResponse

  """Delete Workflow"""
  tsDeleteWorkflow(input: TSDeleteWorkflowInput): TSRemoveWorkflowResponse

  """Schedule content status update"""
  tsScheduleStatusUpdate(input: TSScheduleStatusUpdateInput!): TSStatusUpdate

  """Cancel scheduled content status update"""
  tsCancelStatusUpdate(input: TSCancelStatusUpdateInput!): Boolean

  """Exports your project to a ZIP file, which you can then download"""
  tsExportProject(empty: Boolean, origin: String): String

  """Update Project"""
  tsUpdateProject(id: ID, name: String, avatarId: ID, defaultTimezone: String): TSProject

  """Update Project Billing"""
  tsUpdateProjectBilling(id: ID, token: String, planId: String, coupon: String, email: String): TSBilling

  """Update Project Permissions"""
  tsUpdateProjectPermissions(userId: ID, role: String!): TSPermissions

  """Update Invite Role"""
  tsUpdateInviteRole(email: String!, role: String!): TSInvite

  """Cancel Project Invite"""
  tsCancelProjectInvite(email: String!): TSInvite

  """Remove Project Member"""
  tsRemoveProjectMember(userId: ID): TSPermissions

  """Deactivate project"""
  tsDeleteProject(id: ID!): Boolean

  """Register a setup step as completed"""
  tsCompleteSetupStep(stepKey: String!): Boolean

  """Update a token for a integration provider"""
  tsUpdateIntegrationToken(provider: String!, token: String): TSIntegrationToken

  """Update service information"""
  tsUpdateService(service: String, name: String): String

  """Initiate upload process for asset(s)"""
  uploadAssets(projectId: ID, files: [TSFile]!): [Upload]

  """Replace an asset file"""
  replaceAsset(projectId: ID, _id: ID!, _version: Int!, file: TSFile!): Upload

  """Update Asset"""
  updateAsset(input: UpdateAssetInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAssetResult

  """Create Asset"""
  createAsset(input: CreateAssetInput!): CreateAssetResult

  """Duplicate Asset"""
  duplicateAsset(input: DuplicateAssetInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateAssetResult

  """Delete Asset"""
  deleteAsset(input: DeleteAssetInput!): DeleteAssetResult

  """Update TsStaticSite"""
  updateTsStaticSite(input: UpdateTsStaticSiteInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateTsStaticSiteResult

  """Create TsStaticSite"""
  createTsStaticSite(input: CreateTsStaticSiteInput!): CreateTsStaticSiteResult

  """Duplicate TsStaticSite"""
  duplicateTsStaticSite(input: DuplicateTsStaticSiteInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateTsStaticSiteResult

  """Delete TsStaticSite"""
  deleteTsStaticSite(input: DeleteTsStaticSiteInput!): DeleteTsStaticSiteResult

  """Update Films"""
  updateFilms(input: UpdateFilmsInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFilmsResult

  """Update Navigation"""
  updateNavigation(input: UpdateNavigationInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateNavigationResult

  """Update SiteSettings"""
  updateSiteSettings(input: UpdateSiteSettingsInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateSiteSettingsResult

  """Update Homepage"""
  updateHomepage(input: UpdateHomepageInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateHomepageResult

  """Update Footer"""
  updateFooter(input: UpdateFooterInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFooterResult

  """Update SocialSettings"""
  updateSocialSettings(input: UpdateSocialSettingsInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateSocialSettingsResult

  """Update StillCategory"""
  updateStillCategory(input: UpdateStillCategoryInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateStillCategoryResult

  """Create StillCategory"""
  createStillCategory(input: CreateStillCategoryInput!): CreateStillCategoryResult

  """Duplicate StillCategory"""
  duplicateStillCategory(input: DuplicateStillCategoryInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateStillCategoryResult

  """Delete StillCategory"""
  deleteStillCategory(input: DeleteStillCategoryInput!): DeleteStillCategoryResult

  """Update Still"""
  updateStill(input: UpdateStillInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateStillResult

  """Update Location"""
  updateLocation(input: UpdateLocationInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateLocationResult

  """Create Location"""
  createLocation(input: CreateLocationInput!): CreateLocationResult

  """Duplicate Location"""
  duplicateLocation(input: DuplicateLocationInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateLocationResult

  """Delete Location"""
  deleteLocation(input: DeleteLocationInput!): DeleteLocationResult

  """Update About"""
  updateAbout(input: UpdateAboutInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAboutResult

  """Update Film"""
  updateFilm(input: UpdateFilmInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFilmResult

  """Create Film"""
  createFilm(input: CreateFilmInput!): CreateFilmResult

  """Duplicate Film"""
  duplicateFilm(input: DuplicateFilmInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateFilmResult

  """Delete Film"""
  deleteFilm(input: DeleteFilmInput!): DeleteFilmResult

  """Update Blog"""
  updateBlog(input: UpdateBlogInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateBlogResult

  """Update Story"""
  updateStory(input: UpdateStoryInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateStoryResult

  """Create Story"""
  createStory(input: CreateStoryInput!): CreateStoryResult

  """Duplicate Story"""
  duplicateStory(input: DuplicateStoryInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateStoryResult

  """Delete Story"""
  deleteStory(input: DeleteStoryInput!): DeleteStoryResult

  """Update Destinations"""
  updateDestinations(input: UpdateDestinationsInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateDestinationsResult

  """Update FilmCategory"""
  updateFilmCategory(input: UpdateFilmCategoryInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFilmCategoryResult

  """Create FilmCategory"""
  createFilmCategory(input: CreateFilmCategoryInput!): CreateFilmCategoryResult

  """Duplicate FilmCategory"""
  duplicateFilmCategory(input: DuplicateFilmCategoryInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateFilmCategoryResult

  """Delete FilmCategory"""
  deleteFilmCategory(input: DeleteFilmCategoryInput!): DeleteFilmCategoryResult

  """Update Category"""
  updateCategory(input: UpdateCategoryInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateCategoryResult

  """Create Category"""
  createCategory(input: CreateCategoryInput!): CreateCategoryResult

  """Duplicate Category"""
  duplicateCategory(input: DuplicateCategoryInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateCategoryResult

  """Delete Category"""
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryResult

  """Update Continent"""
  updateContinent(input: UpdateContinentInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateContinentResult

  """Create Continent"""
  createContinent(input: CreateContinentInput!): CreateContinentResult

  """Duplicate Continent"""
  duplicateContinent(input: DuplicateContinentInput!, locale: String, enableLocaleFallback: Boolean = true): DuplicateContinentResult

  """Delete Continent"""
  deleteContinent(input: DeleteContinentInput!): DeleteContinentResult
}

type Navigation implements TSSearchable {
  social: NavigationSocial
  links: [NavigationLinks]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type NavigationLinks {
  children(locale: String, enableLocaleFallback: Boolean = true): [NavigationLinksChildren]
  url: String
  text: String
}

union NavigationLinksChildren = Location | FilmCategory | StillCategory | Continent | Category

input NavigationLinksInput {
  children: [TSRelationshipInput]
  url: String
  text: String
}

type NavigationPaginatedList {
  items: [Navigation]
  total: Int
}

type NavigationSocial {
  instagramUrl: String
  facebookUrl: String
  pinterestUrl: String
  youTubeUrl: String
}

input NavigationSocialInput {
  instagramUrl: String
  facebookUrl: String
  pinterestUrl: String
  youTubeUrl: String
}

"""Root of the Schema"""
type Root {
  """List of Projects"""
  tsGetProjectList: [TSProjectListItem]

  """List of project templates available for import."""
  tsGetProjectTemplateList: [TSProjectTemplate]

  """Retrieve a project import."""
  tsGetProjectImport(id: String!): TSProjectImport

  """Activity Log"""
  tsGetActivityLog(filters: JSON): [TSActivityLogItem]

  """Most Recent Static Site Deploys"""
  tsGetLatestSiteDeploys: [TSActivityLogItem]

  """Get the status of a site deploy"""
  tsSiteDeployStatus(siteId: ID): TSSite

  """Get the status of a site deploy"""
  tsGetContentUsage(id: ID!): [TSContentUsage]

  """List potential preview paths"""
  tsGetPreviewPathList: [TSContentTypePreviewPaths]

  """Get static site preview token"""
  tsGetSitePreviewToken(siteId: String!): String

  """Get a Lock by id"""
  tsIsLocked(contentTypeId: ID, id: ID): TSLock

  """Get an API key by key and project"""
  tsGetApiKey(id: ID): TSApiKey

  """Get all API Keys for a Project"""
  tsGetApiKeysByProject: [TSApiKey]

  """Get user/API role"""
  tsGetRole(name: String!): TSRole

  """List user/API roles for the current project"""
  tsGetRoleList: TSRolePaginatedList

  """Get all webhooks"""
  tsGetWebhooks: TSWebhooks

  """Get specific webhook history item by webhookUrl and invocationTime."""
  tsGetWebhookHistoryItem(webhookUrl: String!, invocationTime: String): TSWebhookHistory

  """
  Get webhook history items for a webhookUrl. Filter for a window of invocationTime with the from and to arguments.
  """
  tsGetWebhookHistory(
    webhookUrl: String!

    """Filter start time, inclusive, as an ISO8601 date string."""
    from: String

    """Filter end time, inclusive, as an ISO8601 date string."""
    to: String
  ): [TSWebhookHistory]

  """Get Locales for Project"""
  tsGetLocales: TSLocales

  """
  Get all available Shapes, Queries, and Mutations for connected Services
  """
  tsGetAvailableSchema: JSONObject

  """Get upcoming scheduled content status updates"""
  tsGetStatusUpdateList(contentId: String!, shapeName: String, contentTypeName: String): TSStatusUpdateList
  tsGetUsage: TSUsageType

  """
  Retrieve a project export. If the export is completed, you'll be provided with a path to it.
  """
  tsGetProjectExport(id: String!): TSProjectExport

  """Get a Project by id"""
  tsGetProject(id: ID): TSProject

  """List of Project Members"""
  tsGetProjectMembers(id: ID): [TSUser]

  """List of Project Members"""
  tsGetProjectAdmins: [TSUser]

  """List of Project Plans"""
  tsGetPlanList: [TSBillingPlan]

  """List all payments for a project"""
  tsGetPaymentList(cursor: ID): TSBillingPaymentCursorPaginatedList

  """List of active Project Members and the content they have open"""
  tsGetProjectMembersLocationList: [TSMemberLocation]
  search(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchResults
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList
  searchAssetIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchStillCategoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStillCategoryInput
  ): StillCategorySearchResults
  searchLocationIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereLocationInput
  ): LocationSearchResults
  searchFilmIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmInput
  ): FilmSearchResults
  searchStoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStoryInput
  ): StorySearchResults
  searchFilmCategoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmCategoryInput
  ): FilmCategorySearchResults
  searchCategoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereCategoryInput
  ): CategorySearchResults
  searchContinentIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereContinentInput
  ): ContinentSearchResults

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList

  """Get a Films by ID"""
  getFilms(locale: String, enableLocaleFallback: Boolean = true): Films

  """Get a Navigation by ID"""
  getNavigation(locale: String, enableLocaleFallback: Boolean = true): Navigation

  """Get a SiteSettings by ID"""
  getSiteSettings(locale: String, enableLocaleFallback: Boolean = true): SiteSettings

  """Get a Homepage by ID"""
  getHomepage(locale: String, enableLocaleFallback: Boolean = true): Homepage

  """Get a Footer by ID"""
  getFooter(locale: String, enableLocaleFallback: Boolean = true): Footer

  """Get a SocialSettings by ID"""
  getSocialSettings(locale: String, enableLocaleFallback: Boolean = true): SocialSettings

  """Get a StillCategory by ID"""
  getStillCategory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): StillCategory

  """Returns a list StillCategory in natural order."""
  getStillCategoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStillCategoryInput
  ): StillCategoryPaginatedList

  """Get a Still by ID"""
  getStill(locale: String, enableLocaleFallback: Boolean = true): Still

  """Get a Location by ID"""
  getLocation(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Location

  """Returns a list Location in natural order."""
  getLocationList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereLocationInput
  ): LocationPaginatedList

  """Get a About by ID"""
  getAbout(locale: String, enableLocaleFallback: Boolean = true): About

  """Get a Film by ID"""
  getFilm(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Film

  """Returns a list Film in natural order."""
  getFilmList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmInput
  ): FilmPaginatedList

  """Get a Blog by ID"""
  getBlog(locale: String, enableLocaleFallback: Boolean = true): Blog

  """Get a Story by ID"""
  getStory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Story

  """Returns a list Story in natural order."""
  getStoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStoryInput
  ): StoryPaginatedList

  """Get a Destinations by ID"""
  getDestinations(locale: String, enableLocaleFallback: Boolean = true): Destinations

  """Get a FilmCategory by ID"""
  getFilmCategory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): FilmCategory

  """Returns a list FilmCategory in natural order."""
  getFilmCategoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmCategoryInput
  ): FilmCategoryPaginatedList

  """Get a Category by ID"""
  getCategory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Category

  """Returns a list Category in natural order."""
  getCategoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereCategoryInput
  ): CategoryPaginatedList

  """Get a Continent by ID"""
  getContinent(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Continent

  """Returns a list Continent in natural order."""
  getContinentList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereContinentInput
  ): ContinentPaginatedList
  withContext(locale: String, enableLocaleFallback: Boolean): WithContext
}

type SiteSettings implements TSSearchable {
  googleAnalyticsId: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type SocialSettings implements TSSearchable {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  description: String
  siteName: String
  url: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type SocialSettingsPaginatedList {
  items: [SocialSettings]
  total: Int
}

type Still implements TSSearchable {
  stillCategories(locale: String, enableLocaleFallback: Boolean = true): [StillCategory]
  stills: [StillStills]
  title: String!
  social: StillSocial
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type StillCategory implements TSSearchable {
  title: String!
  social: StillCategorySocial
  stills: [StillCategoryStills]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StillCategoryReferencePaginatedList
  navigationSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): NavigationPaginatedList
  stillSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StillPaginatedList
}

"""Returns a StillCategory list in natural order."""
type StillCategoryPaginatedList {
  items: [StillCategory]
  total: Int
}

union StillCategoryReference = Navigation | Still

type StillCategoryReferencePaginatedList {
  items: [StillCategoryReference]
  total: Int
}

"""StillCategory search results"""
type StillCategorySearchResults {
  results: [TSSearchable]
  total: Int
}

type StillCategorySocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input StillCategorySocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

type StillCategoryStills {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input StillCategoryStillsInput {
  image: TSRelationshipInput
}

type StillPaginatedList {
  items: [Still]
  total: Int
}

type StillSocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input StillSocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

type StillStills {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input StillStillsInput {
  image: TSRelationshipInput
}

type Story implements TSSearchable {
  """The initial <ins></ins>, omit the <script></script>"""
  bookingContent: String
  social: StorySocial
  blockCanvas: JSON
  blockCanvasHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String

  """The numeric sequence within data-widget-id"""
  rewardStyleId: String
  location(locale: String, enableLocaleFallback: Boolean = true): [Location]
  title: String!
  tout: StoryTout!
  category(locale: String, enableLocaleFallback: Boolean = true): [Category]
  relatedStories(locale: String, enableLocaleFallback: Boolean = true): [Story]

  """blog URL title"""
  slug: String
  content: JSON!
  contentHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  shopStyleHtml: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
  _references(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StoryReferencePaginatedList
  homepageSet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): HomepagePaginatedList
  storySet(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): StoryPaginatedList
}

"""Returns a Story list in natural order."""
type StoryPaginatedList {
  items: [Story]
  total: Int
}

union StoryReference = Homepage | Story

type StoryReferencePaginatedList {
  items: [StoryReference]
  total: Int
}

"""Story search results"""
type StorySearchResults {
  results: [TSSearchable]
  total: Int
}

type StorySocial {
  title: String
  description: String
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input StorySocialInput {
  title: String
  description: String
  image: TSRelationshipInput
}

type StoryTout {
  image(locale: String, enableLocaleFallback: Boolean = true): Asset
  secondaryImage(locale: String, enableLocaleFallback: Boolean = true): Asset
  dek: String
}

input StoryToutInput {
  image: TSRelationshipInput
  secondaryImage: TSRelationshipInput
  dek: String
}

type TSActivityLogItem {
  activityType: String
  userId: ID
  username: String
  projectId: ID
  siteId: ID
  stage: String
  description: String
  timestamp: String
  metadata: JSON
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSAndOperator {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSAndOperator]
  OR: [TSOrOperator]
  NOT: TSNotOperator
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  social: TSWhereContinentSocial
  stills: TSWhereStillCategoryStills
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  youTubeUrl: TSWhereString
  bookingContent: TSWhereString
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  name: TSWhereString
  locations: TSWhereLocationRelationship
}

type TSApiKey {
  projectId: ID
  name: String
  role: String
  permissions: JSON
  lastUsed: String
  apiKey: String
  id: ID
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSAssetAndOperator {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSAssetAndOperator]
  OR: [TSAssetOrOperator]
  NOT: TSAssetNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSAssetNotOperator {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSAssetOrOperator {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSAssetAndOperator]
  OR: [TSAssetOrOperator]
  NOT: TSAssetNotOperator
}

type TSBilling {
  enterprise: Boolean
  cardDetails: TSBillingCardDetails
  plan: TSBillingPlan
  discount: TSBillingDiscount
  trialEnd: String
  email: String
}

type TSBillingAmount {
  total: Int
  subtotal: Int
  refund: Int
  discount: TSBillingDiscount
}

type TSBillingCardDetails {
  brand: String
  cvcCheck: String
  expMonth: Int
  expYear: Int
  last4: String
}

type TSBillingDiscount {
  percentOff: Int
  amountOff: Int
  duration: String
  code: String
}

type TSBillingEntitlements {
  users: Int
  apiRequests: Int
  apiRateLimit: Int
  contentEntries: Int
  bandwidth: Int
  deployTargets: Int
  webhooks: Boolean
  locales: Int
  roles: Int
  workflows: Int
}

type TSBillingPayment {
  date: String
  plan: String
  status: String
  amount: TSBillingAmount
  method: String
}

type TSBillingPaymentCursorPaginatedList {
  items: [TSBillingPayment]
  cursor: ID
  hasMore: Boolean
}

type TSBillingPlan {
  id: String
  name: String
  amount: Int
  created: String
  currency: String
  interval: String
  intervalCount: Int
  entitlements: TSBillingEntitlements
  trialPeriodDays: String
}

input TSCancelStatusUpdateInput {
  contentId: String!
  shapeName: String
  contentTypeName: String
  timestamp: String!
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSCategoryAndOperator {
  title: TSWhereString
  social: TSWhereCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSCategoryAndOperator]
  OR: [TSCategoryOrOperator]
  NOT: TSCategoryNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSCategoryNotOperator {
  title: TSWhereString
  social: TSWhereCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSCategoryOrOperator {
  title: TSWhereString
  social: TSWhereCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSCategoryAndOperator]
  OR: [TSCategoryOrOperator]
  NOT: TSCategoryNotOperator
}

type TSContentLocation {
  contentId: String
  contentTypeId: String
  hasLock: Boolean
}

type TSContentTypePreviewPaths {
  contentTypeId: String!
  contentTypeName: String!
  shapeName: String!
  sites: [TSSitePreviewPaths]!
}

type TSContentUsage {
  siteId: ID
  siteTitle: String
  deployedAt: String
  baseUrl: String
  usages: [TSPathUsage]
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSContinentAndOperator {
  name: TSWhereString
  social: TSWhereContinentSocial
  locations: TSWhereLocationRelationship
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSContinentAndOperator]
  OR: [TSContinentOrOperator]
  NOT: TSContinentNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSContinentNotOperator {
  name: TSWhereString
  social: TSWhereContinentSocial
  locations: TSWhereLocationRelationship
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSContinentOrOperator {
  name: TSWhereString
  social: TSWhereContinentSocial
  locations: TSWhereLocationRelationship
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSContinentAndOperator]
  OR: [TSContinentOrOperator]
  NOT: TSContinentNotOperator
}

input TSDeleteWorkflowInput {
  version: Int!
  name: String!
}

input TSFile {
  name: String!
  type: String!
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSFilmAndOperator {
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  title: TSWhereString
  youTubeUrl: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSFilmAndOperator]
  OR: [TSFilmOrOperator]
  NOT: TSFilmNotOperator
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSFilmCategoryAndOperator {
  title: TSWhereString
  social: TSWhereFilmCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSFilmCategoryAndOperator]
  OR: [TSFilmCategoryOrOperator]
  NOT: TSFilmCategoryNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSFilmCategoryNotOperator {
  title: TSWhereString
  social: TSWhereFilmCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSFilmCategoryOrOperator {
  title: TSWhereString
  social: TSWhereFilmCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSFilmCategoryAndOperator]
  OR: [TSFilmCategoryOrOperator]
  NOT: TSFilmCategoryNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSFilmNotOperator {
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  title: TSWhereString
  youTubeUrl: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSFilmOrOperator {
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  title: TSWhereString
  youTubeUrl: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSFilmAndOperator]
  OR: [TSFilmOrOperator]
  NOT: TSFilmNotOperator
}

input TSImagesConfig {
  """Default image parameters. See https://docs.imgix.com/apis/url """
  default: JSON

  """Small image parameters. See https://docs.imgix.com/apis/url """
  small: JSON

  """Medium image parameters. See https://docs.imgix.com/apis/url """
  medium: JSON

  """Large image parameters. See https://docs.imgix.com/apis/url """
  large: JSON
}

type TSIntegrationToken {
  provider: String!
  token: String
}

type TSInvite {
  inviteCode: ID
  email: ID
  role: String
  projectId: ID
  inviterUserId: ID
  status: String
}

type TSLocales {
  defaultLocale: String!
  locales: [String]
  version: Int!
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSLocationAndOperator {
  title: TSWhereString
  image: TSWhereAssetRelationship
  social: TSWhereLocationSocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSLocationAndOperator]
  OR: [TSLocationOrOperator]
  NOT: TSLocationNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSLocationNotOperator {
  title: TSWhereString
  image: TSWhereAssetRelationship
  social: TSWhereLocationSocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSLocationOrOperator {
  title: TSWhereString
  image: TSWhereAssetRelationship
  social: TSWhereLocationSocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSLocationAndOperator]
  OR: [TSLocationOrOperator]
  NOT: TSLocationNotOperator
}

type TSLock {
  user: TSUser
  expires: String
}

type TSMemberLocation {
  userId: String!
  contentList: [TSContentLocation]
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSNotOperator {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSContinentAndOperator]
  OR: [TSContinentOrOperator]
  NOT: TSContinentNotOperator
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  social: TSWhereContinentSocial
  stills: TSWhereStillCategoryStills
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  youTubeUrl: TSWhereString
  bookingContent: TSWhereString
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  name: TSWhereString
  locations: TSWhereLocationRelationship
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSOrOperator {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSAndOperator]
  OR: [TSOrOperator]
  NOT: TSNotOperator
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  social: TSWhereContinentSocial
  stills: TSWhereStillCategoryStills
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  youTubeUrl: TSWhereString
  bookingContent: TSWhereString
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  name: TSWhereString
  locations: TSWhereLocationRelationship
}

type TSPathUsage {
  path: String
  depth: Int
}

type TSPermissions {
  userId: ID
  projectId: ID
  role: String
}

type TSPreviewRoute {
  routeName: String!
  isPaginated: Boolean
  path: String!
}

"""
A Project is you main workspace it stores the content that powers your API
"""
type TSProject {
  id: ID
  name: String
  template: TSProjectTemplate
  invite: String
  users: [TSUser]

  """Takeshape project schema"""
  schema: JSON

  """Takeshape project schema"""
  billing: TSBilling

  """Project status object"""
  status: JSON

  """Project avatar"""
  avatar: BaseAsset

  """Default project timezone"""
  defaultTimezone: String!
  integrationTokens: [TSIntegrationToken]
}

"""Projects are exported to downloadable ZIP files."""
type TSProjectExport {
  id: String
  status: String
  file: String
}

type TSProjectImport {
  id: String
  status: String
  message: String
  projectId: String
}

"""
A Project is you main workspace it stores the content that powers your API
"""
type TSProjectListItem {
  id: ID
  name: String
  invite: String
  type: String

  """Project status object"""
  status: JSON

  """Project avatar"""
  avatar: BaseAsset

  """Default project timezone"""
  defaultTimezone: String!
}

"""A project template available for import."""
type TSProjectTemplate {
  id: String!
  name: String!
  description: String
  avatarPath: String
  glitchProjectName: String
  sourcePath: String!
  uri: String
}

input TSRelationshipInput {
  shapeId: String
  contentTypeId: String
  id: String
}

type TSRemoveWorkflowResponse {
  name: String
  schemaVersion: Int
  removed: Boolean
  shapes: JSONObject
}

type TSResourceActions {
  resource: String!
  actions: [String]
}

input TSResourceActionsInput {
  resource: String!
  actions: [String]
}

type TSRole {
  name: String!
  permissions: JSONObject!
  created: String
  updated: String
  builtIn: Boolean
}

input TSRoleInput {
  name: String!
  permissions: JSONObject!
  created: String
  updated: String
}

type TSRolePaginatedList {
  items: [TSRole]
  total: Int
  from: Int
  size: Int
}

input TSSaveWorkflowInput {
  version: Int!
  workflow: TSWorkflowInput!
}

type TSSaveWorkflowResponse {
  projectId: String
  schemaVersion: Int
  workflow: TSWorkflow
  shapes: JSONObject
}

input TSScheduleStatusUpdateInput {
  timestamp: String!
  contentId: String!
  status: String!
  shapeName: String
  contentTypeName: String
}

interface TSSearchable {
  _id: ID
  _shapeId: String
  searchSummary: String
}

"""TS search results"""
type TSSearchResults {
  results: [TSSearchable]
  total: Int
}

input TSSearchSort {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

input TSServiceAuthInput {
  accessToken: String!
  refreshtoken: String
  scope: String
}

input TSServiceParams {
  type: String
  authHeader: String
  namespace: String
  endpoint: String
}

input TSShallowWhereCategorySocial {
  title: TSWhereString
  description: TSWhereString
}

input TSShallowWhereFilmCategorySocial {
  title: TSWhereString
  description: TSWhereString
}

input TSShallowWhereLocationSocial {
  title: TSWhereString
  description: TSWhereString
}

input TSShallowWhereStorySocial {
  title: TSWhereString
  description: TSWhereString
}

input TSShallowWhereStoryTout {
  dek: TSWhereString
}

type TSSite {
  siteId: ID
  status: String
  message: String
}

type TSSitePreviewPaths {
  siteTitle: String!
  siteId: String!
  token: String
  routes: [TSPreviewRoute]!
}

type TsStaticSite implements TSSearchable {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariables]
  triggers: [TsStaticSiteTriggers]
  templateHash: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type TsStaticSiteEnvironmentVariables {
  name: String
  value: String
}

input TsStaticSiteEnvironmentVariablesInput {
  name: String
  value: String
}

"""Returns a TsStaticSite list in natural order."""
type TsStaticSitePaginatedList {
  items: [TsStaticSite]
  total: Int
}

"""TsStaticSite search results"""
type TsStaticSiteSearchResults {
  results: [TSSearchable]
  total: Int
}

type TsStaticSiteTriggers {
  contentTypeId: String
  status: String
}

input TsStaticSiteTriggersInput {
  contentTypeId: String
  status: String
}

type TSStatusUpdate {
  id: String!
  timestamp: String!
  type: String!
  payload: JSONObject
}

type TSStatusUpdateList {
  items: [TSStatusUpdate]
  total: Int
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSStillCategoryAndOperator {
  title: TSWhereString
  social: TSWhereStillCategorySocial
  stills: TSWhereStillCategoryStills
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSStillCategoryAndOperator]
  OR: [TSStillCategoryOrOperator]
  NOT: TSStillCategoryNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSStillCategoryNotOperator {
  title: TSWhereString
  social: TSWhereStillCategorySocial
  stills: TSWhereStillCategoryStills
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSStillCategoryOrOperator {
  title: TSWhereString
  social: TSWhereStillCategorySocial
  stills: TSWhereStillCategoryStills
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSStillCategoryAndOperator]
  OR: [TSStillCategoryOrOperator]
  NOT: TSStillCategoryNotOperator
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSStoryAndOperator {
  bookingContent: TSWhereString
  social: TSWhereStorySocial
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  title: TSWhereString
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSStoryAndOperator]
  OR: [TSStoryOrOperator]
  NOT: TSStoryNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSStoryNotOperator {
  bookingContent: TSWhereString
  social: TSWhereStorySocial
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  title: TSWhereString
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSStoryOrOperator {
  bookingContent: TSWhereString
  social: TSWhereStorySocial
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  title: TSWhereString
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSStoryAndOperator]
  OR: [TSStoryOrOperator]
  NOT: TSStoryNotOperator
}

type TSSuggestion {
  _id: ID
  _shapeId: ID
  _shapeName: String
  text: String
  summary: String
}

type TSSuggestionPaginatedList {
  items: [TSSuggestion]
  total: Int
}

"""
AND takes an array of conditions that must appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSTsStaticSiteAndOperator {
  title: TSWhereString
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSTsStaticSiteAndOperator]
  OR: [TSTsStaticSiteOrOperator]
  NOT: TSTsStaticSiteNotOperator
}

"""
NOT takes a single condition that must not appear in the matching results.
"""
input TSTsStaticSiteNotOperator {
  title: TSWhereString
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

"""
OR takes an array of conditions that should appear in the matching results.
Nested boolean operators can be used to create complex filters.
"""
input TSTsStaticSiteOrOperator {
  title: TSWhereString
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSTsStaticSiteAndOperator]
  OR: [TSTsStaticSiteOrOperator]
  NOT: TSTsStaticSiteNotOperator
}

input TSUpdateSchemaInput {
  version: Int!
  schemaVersion: String!
  queries: JSONObject
  mutations: JSONObject
  shapes: JSONObject
  forms: JSONObject
}

input TSUpdateSchemaServiceInput {
  serviceId: String!
  auth: TSServiceAuthInput
  params: TSServiceParams
}

input TSUpdateWorkflowInput {
  version: Int!
  name: String!
  workflow: TSWorkflowInput!
}

type TSUsageType {
  """The usage period start time"""
  startTime: String

  """The usage period end time"""
  endTime: String

  """Get members for project"""
  users: Int

  """Get user bandwidth"""
  bandwidth: Int

  """Get user roles"""
  roles: Int

  """Get user workflows"""
  workflows: Int

  """Get user sites"""
  deployTargets: Int

  """Get user locales"""
  locales: Int

  """Get user api calls"""
  apiRequests: Int

  """Get user content entries"""
  contentEntries: Int
}

type TSUser {
  id: ID
  email: String
  fullName: String
  role: String
  avatarPath: String
}

type TSVersion {
  id: String
  version: Int
  status: String
  enabled: Boolean
  color: String
  updatedAt: String
  updatedBy: TSUser
  item(locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse
}

type TSVersionResponse {
  content: JSONObject
  schema: JSONObject
}

type TSVersionsPaginatedList {
  items: [TSVersion]
  total: Int
  from: Int
  size: Int
}

type TSWebhook {
  webhookUrl: String!
  headers: [HttpHeader]
  resourceActions: [TSResourceActions]
}

type TSWebhookHistory {
  _invocationTime: String!
  projectId: ID!
  webhookUrl: String!
  stats: TSWebhookHistoryStats!
}

type TSWebhookHistoryError {
  name: String
  message: String
}

type TSWebhookHistoryRequest {
  url: String!
  headers: JSON
  body: JSON
}

type TSWebhookHistoryResponse {
  status: String!
  statusText: String
  url: String!
  headers: JSON
  body: JSON
}

type TSWebhookHistoryStats {
  succeeded: Boolean!
  retrying: Boolean!
  invocationStartTime: String!
  invocationDuration: Int!
  request: TSWebhookHistoryRequest!
  response: TSWebhookHistoryResponse
  error: TSWebhookHistoryError
}

input TSWebhookInput {
  webhookUrl: String!
  headers: [HttpHeaderInput]
  resourceActions: [TSResourceActionsInput]
}

type TSWebhooks {
  secret: String
  webhooks: [TSWebhook]
}

input TSWebhooksInput {
  resetSecret: Boolean
  webhooks: [TSWebhookInput]
}

input TSWhereAssetInput {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSAssetAndOperator]
  OR: [TSAssetOrOperator]
  NOT: TSAssetNotOperator
}

input TSWhereAssetRelationship {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
}

input TSWhereBoolean {
  """Exact match"""
  eq: Boolean
}

input TSWhereCategoryInput {
  title: TSWhereString
  social: TSWhereCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSCategoryAndOperator]
  OR: [TSCategoryOrOperator]
  NOT: TSCategoryNotOperator
}

input TSWhereCategoryRelationship {
  title: TSWhereString
  social: TSShallowWhereCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

input TSWhereCategorySocial {
  title: TSWhereString
  description: TSWhereString
  image: TSWhereAssetRelationship
}

input TSWhereContinentInput {
  name: TSWhereString
  social: TSWhereContinentSocial
  locations: TSWhereLocationRelationship
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSContinentAndOperator]
  OR: [TSContinentOrOperator]
  NOT: TSContinentNotOperator
}

input TSWhereContinentSocial {
  title: TSWhereString
  description: TSWhereString
  image: TSWhereAssetRelationship
}

input TSWhereDate {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String
}

input TSWhereDraftjs {
  """Full text searching with fuzzy matching."""
  match: String
}

input TSWhereFilmCategoryInput {
  title: TSWhereString
  social: TSWhereFilmCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSFilmCategoryAndOperator]
  OR: [TSFilmCategoryOrOperator]
  NOT: TSFilmCategoryNotOperator
}

input TSWhereFilmCategoryRelationship {
  title: TSWhereString
  social: TSShallowWhereFilmCategorySocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

input TSWhereFilmCategorySocial {
  title: TSWhereString
  description: TSWhereString
  image: TSWhereAssetRelationship
}

input TSWhereFilmInput {
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  title: TSWhereString
  youTubeUrl: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSFilmAndOperator]
  OR: [TSFilmOrOperator]
  NOT: TSFilmNotOperator
}

input TSWhereID {
  """Exact match"""
  eq: ID

  """Array of possible exact match values."""
  in: [ID]
}

input TSWhereInput {
  sourceUrl: TSWhereString
  path: TSWhereString
  filename: TSWhereString
  description: TSWhereString
  caption: TSWhereDraftjs
  uploadStatus: TSWhereString
  mimeType: TSWhereString
  title: TSWhereString
  credit: TSWhereDraftjs
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  s3Key: TSWhereString
  AND: [TSAndOperator]
  OR: [TSOrOperator]
  NOT: TSNotOperator
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  social: TSWhereContinentSocial
  stills: TSWhereStillCategoryStills
  image: TSWhereAssetRelationship
  filmCategory: TSWhereFilmCategoryRelationship
  youTubeUrl: TSWhereString
  bookingContent: TSWhereString
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  name: TSWhereString
  locations: TSWhereLocationRelationship
}

input TSWhereInteger {
  """Exact match"""
  eq: Int

  """Less than"""
  lt: Int

  """Less than or equal"""
  lte: Int

  """Greater than"""
  gt: Int

  """Greater than or equal"""
  gte: Int

  """Array of possible exact match values."""
  in: [Int]
}

input TSWhereLocationInput {
  title: TSWhereString
  image: TSWhereAssetRelationship
  social: TSWhereLocationSocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSLocationAndOperator]
  OR: [TSLocationOrOperator]
  NOT: TSLocationNotOperator
}

input TSWhereLocationRelationship {
  title: TSWhereString
  social: TSShallowWhereLocationSocial
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

input TSWhereLocationSocial {
  title: TSWhereString
  image: TSWhereAssetRelationship
  description: TSWhereString
}

input TSWhereNumber {
  """Exact match"""
  eq: Float

  """Less than"""
  lt: Float

  """Less than or equal"""
  lte: Float

  """Greater than"""
  gt: Float

  """Greater than or equal"""
  gte: Float

  """Array of possible exact match values."""
  in: [Float]
}

input TSWhereStillCategoryInput {
  title: TSWhereString
  social: TSWhereStillCategorySocial
  stills: TSWhereStillCategoryStills
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSStillCategoryAndOperator]
  OR: [TSStillCategoryOrOperator]
  NOT: TSStillCategoryNotOperator
}

input TSWhereStillCategorySocial {
  title: TSWhereString
  description: TSWhereString
  image: TSWhereAssetRelationship
}

input TSWhereStillCategoryStills {
  image: TSWhereAssetRelationship
}

input TSWhereStoryInput {
  bookingContent: TSWhereString
  social: TSWhereStorySocial
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  location: TSWhereLocationRelationship
  title: TSWhereString
  tout: TSWhereStoryTout
  category: TSWhereCategoryRelationship
  relatedStories: TSWhereStoryRelationship
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSStoryAndOperator]
  OR: [TSStoryOrOperator]
  NOT: TSStoryNotOperator
}

input TSWhereStoryRelationship {
  bookingContent: TSWhereString
  social: TSShallowWhereStorySocial
  blockCanvas: TSWhereDraftjs
  rewardStyleId: TSWhereString
  title: TSWhereString
  tout: TSShallowWhereStoryTout
  slug: TSWhereString
  content: TSWhereDraftjs
  shopStyleHtml: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
}

input TSWhereStorySocial {
  title: TSWhereString
  description: TSWhereString
  image: TSWhereAssetRelationship
}

input TSWhereStoryTout {
  image: TSWhereAssetRelationship
  secondaryImage: TSWhereAssetRelationship
  dek: TSWhereString
}

input TSWhereString {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereTsStaticSiteEnvironmentVariables {
  name: TSWhereString
  value: TSWhereString
}

input TSWhereTsStaticSiteInput {
  title: TSWhereString
  baseUrl: TSWhereString
  provider: TSWhereString
  idKey: TSWhereString
  destination: TSWhereString
  privateAcl: TSWhereBoolean
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariables
  triggers: TSWhereTsStaticSiteTriggers
  templateHash: TSWhereString
  _id: TSWhereID
  _version: TSWhereInteger
  _shapeId: TSWhereID
  _shapeName: TSWhereString
  _createdAt: TSWhereDate
  _updatedAt: TSWhereDate
  _schemaVersion: TSWhereNumber
  _enabled: TSWhereBoolean
  _enabledAt: TSWhereDate
  _contentTypeId: TSWhereID
  _contentTypeName: TSWhereString
  AND: [TSTsStaticSiteAndOperator]
  OR: [TSTsStaticSiteOrOperator]
  NOT: TSTsStaticSiteNotOperator
}

input TSWhereTsStaticSiteTriggers {
  contentTypeId: TSWhereString
  status: TSWhereString
}

type TSWorkflow {
  name: String!
  title: String!
  steps: [TSWorkflowStep]
}

input TSWorkflowInput {
  name: String!
  title: String!
  steps: [TSWorkflowStepInput]
}

type TSWorkflowStep {
  name: String!
  title: String!
  description: String
  color: String!
  live: Boolean!
  key: String!
  canEdit: [String]
}

input TSWorkflowStepInput {
  name: String!
  title: String!
  description: String
  color: String!
  live: Boolean!
  key: String!
  canEdit: [String]
}

"""update About input"""
input UpdateAboutInput {
  clients: AboutClientsInput
  social: AboutSocialInput
  about: AboutAboutInput
  team: AboutTeamInput
  press: AboutPressInput
  title: String
  photostrip: [AboutPhotostripInput]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateAboutResult {
  clientMutationId: String
  result: About
}

"""update Asset input"""
input UpdateAssetInput {
  _id: ID
  sourceUrl: String
  path: String
  filename: String
  description: String
  caption: JSON
  uploadStatus: String
  mimeType: String
  title: String
  credit: JSON
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
  clientMutationId: String
}

type UpdateAssetResult {
  clientMutationId: String
  result: Asset
}

"""update Blog input"""
input UpdateBlogInput {
  title: String
  social: BlogSocialInput
  categories: [TSRelationshipInput]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateBlogResult {
  clientMutationId: String
  result: Blog
}

"""update Category input"""
input UpdateCategoryInput {
  _id: ID
  title: String
  social: CategorySocialInput
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateCategoryResult {
  clientMutationId: String
  result: Category
}

"""update Continent input"""
input UpdateContinentInput {
  _id: ID
  name: String
  social: ContinentSocialInput
  locations: [TSRelationshipInput]
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateContinentResult {
  clientMutationId: String
  result: Continent
}

"""update Destinations input"""
input UpdateDestinationsInput {
  locations: [TSRelationshipInput]
  title: String
  featuredLocations: [TSRelationshipInput]
  social: DestinationsSocialInput
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateDestinationsResult {
  clientMutationId: String
  result: Destinations
}

"""update FilmCategory input"""
input UpdateFilmCategoryInput {
  _id: ID
  title: String
  social: FilmCategorySocialInput
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateFilmCategoryResult {
  clientMutationId: String
  result: FilmCategory
}

"""update Film input"""
input UpdateFilmInput {
  _id: ID
  image: TSRelationshipInput
  filmCategory: TSRelationshipInput
  title: String
  youTubeUrl: String
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateFilmResult {
  clientMutationId: String
  result: Film
}

"""update Films input"""
input UpdateFilmsInput {
  title: String
  featuredFilms: [TSRelationshipInput]
  social: FilmsSocialInput
  filmCategories: [TSRelationshipInput]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateFilmsResult {
  clientMutationId: String
  result: Films
}

"""update Footer input"""
input UpdateFooterInput {
  visuals: [FooterVisualsInput]
  contacts: [FooterContactsInput]
  formEndpoint: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateFooterResult {
  clientMutationId: String
  result: Footer
}

"""update Homepage input"""
input UpdateHomepageInput {
  recentEntries: [TSRelationshipInput]
  slider: HomepageSliderInput
  social: HomepageSocialInput
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateHomepageResult {
  clientMutationId: String
  result: Homepage
}

"""update Location input"""
input UpdateLocationInput {
  _id: ID
  title: String
  image: TSRelationshipInput
  social: LocationSocialInput
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateLocationResult {
  clientMutationId: String
  result: Location
}

"""update Navigation input"""
input UpdateNavigationInput {
  social: NavigationSocialInput
  links: [NavigationLinksInput]
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateNavigationResult {
  clientMutationId: String
  result: Navigation
}

"""update SiteSettings input"""
input UpdateSiteSettingsInput {
  googleAnalyticsId: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateSiteSettingsResult {
  clientMutationId: String
  result: SiteSettings
}

"""update SocialSettings input"""
input UpdateSocialSettingsInput {
  image: TSRelationshipInput
  description: String
  siteName: String
  url: String
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateSocialSettingsResult {
  clientMutationId: String
  result: SocialSettings
}

"""update StillCategory input"""
input UpdateStillCategoryInput {
  _id: ID
  title: String
  social: StillCategorySocialInput
  stills: [StillCategoryStillsInput]
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateStillCategoryResult {
  clientMutationId: String
  result: StillCategory
}

"""update Still input"""
input UpdateStillInput {
  stillCategories: [TSRelationshipInput]
  stills: [StillStillsInput]
  title: String
  social: StillSocialInput
  _id: ID
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateStillResult {
  clientMutationId: String
  result: Still
}

"""update Story input"""
input UpdateStoryInput {
  _id: ID

  """The initial <ins></ins>, omit the <script></script>"""
  bookingContent: String
  social: StorySocialInput
  blockCanvas: JSON

  """The numeric sequence within data-widget-id"""
  rewardStyleId: String
  location: [TSRelationshipInput]
  title: String
  tout: StoryToutInput
  category: [TSRelationshipInput]
  relatedStories: [TSRelationshipInput]

  """blog URL title"""
  slug: String
  content: JSON
  shopStyleHtml: String
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateStoryResult {
  clientMutationId: String
  result: Story
}

"""update TsStaticSite input"""
input UpdateTsStaticSiteInput {
  _id: ID
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _version: Int
  _shapeId: String
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _contentTypeId: String
  _contentTypeName: String
  clientMutationId: String
}

type UpdateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""A project file stored on s3"""
type Upload {
  uploadUrl: ID
  asset: Asset
}

type UploadProjectResult {
  uri: String
  importId: String
}

"""This query allow you to pass context to your queries"""
type WithContext {
  search(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchResults
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList
  searchAssetIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchStillCategoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStillCategoryInput
  ): StillCategorySearchResults
  searchLocationIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereLocationInput
  ): LocationSearchResults
  searchFilmIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmInput
  ): FilmSearchResults
  searchStoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStoryInput
  ): StorySearchResults
  searchFilmCategoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmCategoryInput
  ): FilmCategorySearchResults
  searchCategoryIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereCategoryInput
  ): CategorySearchResults
  searchContinentIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereContinentInput
  ): ContinentSearchResults

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList

  """Get a Films by ID"""
  getFilms(locale: String, enableLocaleFallback: Boolean = true): Films

  """Get a Navigation by ID"""
  getNavigation(locale: String, enableLocaleFallback: Boolean = true): Navigation

  """Get a SiteSettings by ID"""
  getSiteSettings(locale: String, enableLocaleFallback: Boolean = true): SiteSettings

  """Get a Homepage by ID"""
  getHomepage(locale: String, enableLocaleFallback: Boolean = true): Homepage

  """Get a Footer by ID"""
  getFooter(locale: String, enableLocaleFallback: Boolean = true): Footer

  """Get a SocialSettings by ID"""
  getSocialSettings(locale: String, enableLocaleFallback: Boolean = true): SocialSettings

  """Get a StillCategory by ID"""
  getStillCategory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): StillCategory

  """Returns a list StillCategory in natural order."""
  getStillCategoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStillCategoryInput
  ): StillCategoryPaginatedList

  """Get a Still by ID"""
  getStill(locale: String, enableLocaleFallback: Boolean = true): Still

  """Get a Location by ID"""
  getLocation(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Location

  """Returns a list Location in natural order."""
  getLocationList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereLocationInput
  ): LocationPaginatedList

  """Get a About by ID"""
  getAbout(locale: String, enableLocaleFallback: Boolean = true): About

  """Get a Film by ID"""
  getFilm(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Film

  """Returns a list Film in natural order."""
  getFilmList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmInput
  ): FilmPaginatedList

  """Get a Blog by ID"""
  getBlog(locale: String, enableLocaleFallback: Boolean = true): Blog

  """Get a Story by ID"""
  getStory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Story

  """Returns a list Story in natural order."""
  getStoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereStoryInput
  ): StoryPaginatedList

  """Get a Destinations by ID"""
  getDestinations(locale: String, enableLocaleFallback: Boolean = true): Destinations

  """Get a FilmCategory by ID"""
  getFilmCategory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): FilmCategory

  """Returns a list FilmCategory in natural order."""
  getFilmCategoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereFilmCategoryInput
  ): FilmCategoryPaginatedList

  """Get a Category by ID"""
  getCategory(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Category

  """Returns a list Category in natural order."""
  getCategoryList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereCategoryInput
  ): CategoryPaginatedList

  """Get a Continent by ID"""
  getContinent(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Continent

  """Returns a list Continent in natural order."""
  getContinentList(
    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct
    complex filters based on the values of your fields. It applies an implicit
    AND to all the top-level keys. To avoid this, use a single OR or NOT key as
    the only top-level key.
    """
    where: TSWhereContinentInput
  ): ContinentPaginatedList
}
